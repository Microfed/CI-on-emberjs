{"version":3,"sources":["ci-on-emberjs/tests/adapters/application.jshint.js","ci-on-emberjs/tests/app.jshint.js","ci-on-emberjs/tests/components/builds-list-item-detail.jshint.js","ci-on-emberjs/tests/components/builds-list-item-short.jshint.js","ci-on-emberjs/tests/components/builds-list-item.jshint.js","ci-on-emberjs/tests/components/builds-list.jshint.js","ci-on-emberjs/tests/components/progress-with-steps.jshint.js","ci-on-emberjs/tests/helpers/destroy-app.js","ci-on-emberjs/tests/helpers/destroy-app.jshint.js","ci-on-emberjs/tests/helpers/ember-i18n/test-helpers.js","ci-on-emberjs/tests/helpers/math-calc.jshint.js","ci-on-emberjs/tests/helpers/module-for-acceptance.js","ci-on-emberjs/tests/helpers/module-for-acceptance.jshint.js","ci-on-emberjs/tests/helpers/resolver.js","ci-on-emberjs/tests/helpers/resolver.jshint.js","ci-on-emberjs/tests/helpers/start-app.js","ci-on-emberjs/tests/helpers/start-app.jshint.js","ci-on-emberjs/tests/helpers/state-system-name.jshint.js","ci-on-emberjs/tests/helpers/state-title.jshint.js","ci-on-emberjs/tests/integration/components/builds-list-item-detail-test.js","ci-on-emberjs/tests/integration/components/builds-list-item-detail-test.jshint.js","ci-on-emberjs/tests/integration/components/builds-list-item-short-test.js","ci-on-emberjs/tests/integration/components/builds-list-item-short-test.jshint.js","ci-on-emberjs/tests/integration/components/builds-list-item-test.js","ci-on-emberjs/tests/integration/components/builds-list-item-test.jshint.js","ci-on-emberjs/tests/integration/components/builds-list-test.js","ci-on-emberjs/tests/integration/components/builds-list-test.jshint.js","ci-on-emberjs/tests/integration/components/progress-with-steps-test.js","ci-on-emberjs/tests/integration/components/progress-with-steps-test.jshint.js","ci-on-emberjs/tests/locales/en/config.jshint.js","ci-on-emberjs/tests/locales/en/translations.jshint.js","ci-on-emberjs/tests/mirage/config.jshint.js","ci-on-emberjs/tests/mirage/factories/build.jshint.js","ci-on-emberjs/tests/mirage/factories/commit.jshint.js","ci-on-emberjs/tests/mirage/factories/job.jshint.js","ci-on-emberjs/tests/mirage/factories/project.jshint.js","ci-on-emberjs/tests/mirage/scenarios/default.jshint.js","ci-on-emberjs/tests/mixins/state-with-duration.jshint.js","ci-on-emberjs/tests/models/build.jshint.js","ci-on-emberjs/tests/models/commit.jshint.js","ci-on-emberjs/tests/models/job.jshint.js","ci-on-emberjs/tests/models/project.jshint.js","ci-on-emberjs/tests/router.jshint.js","ci-on-emberjs/tests/routes/application.jshint.js","ci-on-emberjs/tests/routes/auth.jshint.js","ci-on-emberjs/tests/routes/project/build.jshint.js","ci-on-emberjs/tests/routes/project/builds.jshint.js","ci-on-emberjs/tests/routes/project.jshint.js","ci-on-emberjs/tests/routes/projects.jshint.js","ci-on-emberjs/tests/services/config.jshint.js","ci-on-emberjs/tests/test-helper.js","ci-on-emberjs/tests/test-helper.jshint.js","ci-on-emberjs/tests/unit/adapters/application-test.js","ci-on-emberjs/tests/unit/adapters/application-test.jshint.js","ci-on-emberjs/tests/unit/helpers/math-calc-test.js","ci-on-emberjs/tests/unit/helpers/math-calc-test.jshint.js","ci-on-emberjs/tests/unit/helpers/state-system-name-test.js","ci-on-emberjs/tests/unit/helpers/state-system-name-test.jshint.js","ci-on-emberjs/tests/unit/helpers/state-title-test.js","ci-on-emberjs/tests/unit/helpers/state-title-test.jshint.js","ci-on-emberjs/tests/unit/mixins/state-with-duration-test.js","ci-on-emberjs/tests/unit/mixins/state-with-duration-test.jshint.js","ci-on-emberjs/tests/unit/models/build-test.js","ci-on-emberjs/tests/unit/models/build-test.jshint.js","ci-on-emberjs/tests/unit/models/commit-test.js","ci-on-emberjs/tests/unit/models/commit-test.jshint.js","ci-on-emberjs/tests/unit/models/job-test.js","ci-on-emberjs/tests/unit/models/job-test.jshint.js","ci-on-emberjs/tests/unit/models/project-test.js","ci-on-emberjs/tests/unit/models/project-test.jshint.js","ci-on-emberjs/tests/unit/routes/application-test.js","ci-on-emberjs/tests/unit/routes/application-test.jshint.js","ci-on-emberjs/tests/unit/routes/auth-test.js","ci-on-emberjs/tests/unit/routes/auth-test.jshint.js","ci-on-emberjs/tests/unit/routes/project/build-test.js","ci-on-emberjs/tests/unit/routes/project/build-test.jshint.js","ci-on-emberjs/tests/unit/routes/project/builds-test.js","ci-on-emberjs/tests/unit/routes/project/builds-test.jshint.js","ci-on-emberjs/tests/unit/routes/project-test.js","ci-on-emberjs/tests/unit/routes/project-test.jshint.js","ci-on-emberjs/tests/unit/routes/projects-test.js","ci-on-emberjs/tests/unit/routes/projects-test.jshint.js","ci-on-emberjs/tests/unit/services/config-test.js","ci-on-emberjs/tests/unit/services/config-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('ci-on-emberjs/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/components/builds-list-item-detail.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/builds-list-item-detail.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/builds-list-item-detail.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/components/builds-list-item-short.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/builds-list-item-short.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/builds-list-item-short.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/components/builds-list-item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/builds-list-item.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/builds-list-item.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/components/builds-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/builds-list.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/builds-list.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/components/progress-with-steps.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/progress-with-steps.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/progress-with-steps.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('ci-on-emberjs/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof ok === 'function') {\n      return function (element, key, text) {\n        ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('ci-on-emberjs/tests/helpers/math-calc.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/math-calc.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/math-calc.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ci-on-emberjs/tests/helpers/start-app', 'ci-on-emberjs/tests/helpers/destroy-app'], function (exports, _qunit, _ciOnEmberjsTestsHelpersStartApp, _ciOnEmberjsTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _ciOnEmberjsTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _ciOnEmberjsTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('ci-on-emberjs/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/helpers/resolver', ['exports', 'ember/resolver', 'ci-on-emberjs/config/environment'], function (exports, _emberResolver, _ciOnEmberjsConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _ciOnEmberjsConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _ciOnEmberjsConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('ci-on-emberjs/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/helpers/start-app', ['exports', 'ember', 'ci-on-emberjs/app', 'ci-on-emberjs/config/environment'], function (exports, _ember, _ciOnEmberjsApp, _ciOnEmberjsConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _ciOnEmberjsConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _ciOnEmberjsApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('ci-on-emberjs/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/helpers/state-system-name.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/state-system-name.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/state-system-name.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/helpers/state-title.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/state-title.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/state-title.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/integration/components/builds-list-item-detail-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('builds-list-item-detail', 'Integration | Component | builds list item detail', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 27\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'builds-list-item-detail', ['loc', [null, [1, 0], [1, 27]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    //assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.11',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'builds-list-item-detail', [], [], 0, null, ['loc', [null, [2, 4], [4, 32]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.notEqual(this.$().text().trim().indexOf('template block text'), -1);\n  });\n});","define('ci-on-emberjs/tests/integration/components/builds-list-item-detail-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/builds-list-item-detail-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/builds-list-item-detail-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/integration/components/builds-list-item-short-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('builds-list-item-short', 'Integration | Component | builds list item short', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 26\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'builds-list-item-short', ['loc', [null, [1, 0], [1, 26]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    //assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.11',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'builds-list-item-short', [], [], 0, null, ['loc', [null, [2, 4], [4, 31]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.notEqual(this.$().text().trim().indexOf('template block text'), -1);\n  });\n});","define('ci-on-emberjs/tests/integration/components/builds-list-item-short-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/builds-list-item-short-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/builds-list-item-short-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/integration/components/builds-list-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('builds-list-item', 'Integration | Component | builds list item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'builds-list-item', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    //assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.11',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'builds-list-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.notEqual(this.$().text().trim().indexOf('template block text'), -1);\n  });\n});","define('ci-on-emberjs/tests/integration/components/builds-list-item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/builds-list-item-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/builds-list-item-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/integration/components/builds-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('builds-list', 'Integration | Component | builds list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'builds-list', ['loc', [null, [1, 0], [1, 15]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    //assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.11',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'builds-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.notEqual(this.$().text().trim().indexOf('template block text'), -1);\n  });\n});","define('ci-on-emberjs/tests/integration/components/builds-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/builds-list-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/builds-list-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/integration/components/progress-with-steps-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('progress-with-steps', 'Integration | Component | progress with steps', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 23\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'progress-with-steps', ['loc', [null, [1, 0], [1, 23]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.11',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.11',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'progress-with-steps', [], [], 0, null, ['loc', [null, [2, 4], [4, 28]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ci-on-emberjs/tests/integration/components/progress-with-steps-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/progress-with-steps-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/progress-with-steps-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/locales/en/config.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en');\n  QUnit.test('locales/en/config.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/config.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/locales/en/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en');\n  QUnit.test('locales/en/translations.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/mirage/config.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage');\n  QUnit.test('mirage/config.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/config.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/mirage/factories/build.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories');\n  QUnit.test('mirage/factories/build.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/build.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/mirage/factories/commit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories');\n  QUnit.test('mirage/factories/commit.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/commit.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/mirage/factories/job.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories');\n  QUnit.test('mirage/factories/job.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/job.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/mirage/factories/project.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/factories');\n  QUnit.test('mirage/factories/project.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/factories/project.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/mirage/scenarios/default.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/scenarios');\n  QUnit.test('mirage/scenarios/default.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/scenarios/default.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/mixins/state-with-duration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mixins');\n  QUnit.test('mixins/state-with-duration.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/state-with-duration.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/models/build.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/build.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/build.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/models/commit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/commit.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/commit.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/models/job.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/job.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/job.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/models/project.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/project.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/project.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/routes/auth.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/auth.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/auth.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/routes/project/build.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/project');\n  QUnit.test('routes/project/build.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/project/build.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/routes/project/builds.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/project');\n  QUnit.test('routes/project/builds.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/project/builds.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/routes/project.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/project.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/project.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/routes/projects.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/projects.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/projects.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/services/config.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services');\n  QUnit.test('services/config.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/config.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/test-helper', ['exports', 'ci-on-emberjs/tests/helpers/resolver', 'ember-qunit'], function (exports, _ciOnEmberjsTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_ciOnEmberjsTestsHelpersResolver['default']);\n});","define('ci-on-emberjs/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('ci-on-emberjs/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters');\n  QUnit.test('unit/adapters/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/helpers/math-calc-test', ['exports', 'ci-on-emberjs/helpers/math-calc', 'qunit'], function (exports, _ciOnEmberjsHelpersMathCalc, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | math calc');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _ciOnEmberjsHelpersMathCalc.mathCalc)(42);\n    assert.ok(result);\n  });\n});","define('ci-on-emberjs/tests/unit/helpers/math-calc-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers');\n  QUnit.test('unit/helpers/math-calc-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/math-calc-test.js should pass jshint.');\n  });\n});","define(\"ci-on-emberjs/tests/unit/helpers/state-system-name-test\", [\"exports\"], function (exports) {});\n//import stateSystemName from '../../../helpers/state-system-name';\n//import { module, test } from 'qunit';\n\n//module('Unit | Helper | state system name');\n\n// Replace this with your real tests.\n//test('it works', function(assert) {\n//let result = stateSystemName.create();\n//assert.ok(result);\n//});","define('ci-on-emberjs/tests/unit/helpers/state-system-name-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers');\n  QUnit.test('unit/helpers/state-system-name-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/state-system-name-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/helpers/state-title-test', ['exports', 'ci-on-emberjs/helpers/state-title', 'qunit'], function (exports, _ciOnEmberjsHelpersStateTitle, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | state title');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = _ciOnEmberjsHelpersStateTitle['default'].create();\n    assert.ok(result);\n  });\n});","define('ci-on-emberjs/tests/unit/helpers/state-title-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers');\n  QUnit.test('unit/helpers/state-title-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/state-title-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/mixins/state-with-duration-test', ['exports', 'ember', 'ci-on-emberjs/mixins/state-with-duration', 'qunit'], function (exports, _ember, _ciOnEmberjsMixinsStateWithDuration, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | state with duration');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var StateWithDurationObject = _ember['default'].Object.extend(_ciOnEmberjsMixinsStateWithDuration['default']);\n    var subject = StateWithDurationObject.create();\n    assert.ok(subject);\n  });\n});","define('ci-on-emberjs/tests/unit/mixins/state-with-duration-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins');\n  QUnit.test('unit/mixins/state-with-duration-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/state-with-duration-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/models/build-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('build', 'Unit | Model | build', {\n    // Specify the other units that are required for this test.\n    needs: ['model:project', 'model:commit', 'model:job']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ci-on-emberjs/tests/unit/models/build-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/build-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/build-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/models/commit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('commit', 'Unit | Model | commit', {\n    // Specify the other units that are required for this test.\n    needs: ['model:build']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ci-on-emberjs/tests/unit/models/commit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/commit-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/commit-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/models/job-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('job', 'Unit | Model | job', {\n    // Specify the other units that are required for this test.\n    needs: ['model:project', 'model:commit', 'model:build']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ci-on-emberjs/tests/unit/models/job-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/job-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/job-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/models/project-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('project', 'Unit | Model | project', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ci-on-emberjs/tests/unit/models/project-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/project-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/project-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ci-on-emberjs/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/routes/auth-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:auth', 'Unit | Route | auth', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ci-on-emberjs/tests/unit/routes/auth-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/auth-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/auth-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/routes/project/build-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:project/build', 'Unit | Route | project/build', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ci-on-emberjs/tests/unit/routes/project/build-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/project');\n  QUnit.test('unit/routes/project/build-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/project/build-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/routes/project/builds-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:project/builds', 'Unit | Route | project/builds', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ci-on-emberjs/tests/unit/routes/project/builds-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/project');\n  QUnit.test('unit/routes/project/builds-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/project/builds-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/routes/project-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:project', 'Unit | Route | project', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ci-on-emberjs/tests/unit/routes/project-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/project-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/project-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/routes/projects-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:projects', 'Unit | Route | projects', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ci-on-emberjs/tests/unit/routes/projects-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/projects-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/projects-test.js should pass jshint.');\n  });\n});","define('ci-on-emberjs/tests/unit/services/config-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:config', 'Unit | Service | config', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('ci-on-emberjs/tests/unit/services/config-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/config-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/config-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('ci-on-emberjs/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}